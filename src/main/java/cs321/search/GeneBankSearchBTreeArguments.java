package cs321.search;

import cs321.common.ParseArgumentException;
import java.io.File;
import java.io.FileNotFoundException;

public class GeneBankSearchBTreeArguments {
    public final boolean useCache;
    public String BTreeFileName;
    public String queryFileName;
    public int cacheSize;
    public int debugLevel;

    public GeneBankSearchBTreeArguments(String[] args) throws ParseArgumentException {
        if (args.length < 3 || args.length > 5) {
            throw new ParseArgumentException("Invalid number of arguments Usage: java GeneBankSearch <0/1(no/with Cache)> <btree file> <query file> [<cache size>] [<debug level>]");
        }
        this.useCache = getCache(args[0]);
        this.BTreeFileName = getFileName(args[1]);
        this.queryFileName = getFileName(args[2]);
        if (useCache) {
            this.cacheSize = getCacheSize(args[3]);
        } else if (args.length == 4) {
              this.debugLevel = getDebugLevel(args[3]);
        }
    }

    /**
     * Return if cache is used
     * @param c
     * @return true if using cache and false if not using cache
     * @throws ParseArgumentException
     */
    public static boolean getCache(String c) throws ParseArgumentException {
        try {
            if (c.equals("1")) {
                return true;
            }
            else if (c.equals("0")) {
                return false;
            }
        } catch (NumberFormatException e) {
            throw new ParseArgumentException("Cache Usage: java GeneBankSearch <0/1(no/with Cache)> <btree file> <query file> [<cache size>] [<debug level>]\n" +
                    "<0 (no cache) | 1 (cache)>: specifies whether the program should use cache (value 1) or " +
                    "no cache (value 0); if the value is 1, the <cache_size> has to be specified");
        }
        return false;
    }

    /**
     * Gets filename from string
     * @param str
     * @return FileName
     */
    public static String getFileName(String str) {
        return str;
    }

    /**
     * Get cache size if used
     * @param c
     * @return cache size
     * @throws ParseArgumentException
     */
    public static int getCacheSize(String c) throws ParseArgumentException {
        int i;
        try {
            i = Integer.parseInt(c);
            if (i < 100 || i > 500) {
                throw new ParseArgumentException("Cache size Usage: java GeneBankSearch <0/1(no/with Cache)> <btree file> <query file> [<cache size>] [<debug level>]\n" +
                        "[<cache size>]: is an integer between 100 and 500 (inclusive) that represents the maximum" +
                        "number of BTreeNode objects that can be stored in memory");
            }
            return i;
        } catch (NumberFormatException e) {
            throw new ParseArgumentException("Number Format E - Cache size Usage: java GeneBankSearch <0/1(no/with Cache)> <btree file> <query file> [<cache size>] [<debug level>]\n" +
                    "[<cache size>]: is an integer between 100 and 500 (inclusive) that represents the maximum " +
                    "number of BTreeNode objects that can be stored in memory");
        }

    }

    /**
     * Get debug level
     * @param c
     * @return debug level 1 or 0
     * @throws ParseArgumentException
     */
    public static int getDebugLevel(String c) throws ParseArgumentException {
        int d = Integer.parseInt(c);
        try {
            if (d == 1) {
                return d;
            } else {
                return 0;
            }
        } catch (NumberFormatException e) {
            throw new ParseArgumentException("Debug level Usage: java GeneBankSearch <0/1(no/with Cache)> <btree file> <query file> [<cache size>] [<debug level>]" +
                    "[<debug level>]: 0 for standard output; 1 for additional files.");
        } catch (IndexOutOfBoundsException e) {
            return 0;
        }
    }

    /**
     * Check if bTree file exists
     * @param bTreeFile
     * @throws ParseArgumentException
     */
    public static void checkBFile(File bTreeFile) throws ParseArgumentException {
        try {
            if (!bTreeFile.exists()) {
                throw new FileNotFoundException();
            }

        } catch (FileNotFoundException e) {
            throw new ParseArgumentException("BTree File Usage:  java GeneBankSearch <0/1(no/with Cache)> <btree file> <query file> [<cache size>] [<debug level>]\n" +
                                            "< b-tree_file> is the B-Tree file generated by the GeneBankCreateBTree program");
        }
    }

    /**
     * Check if query file exists
     * @param queryFile
     * @throws ParseArgumentException
     */
    public static void checkQFile(File queryFile) throws ParseArgumentException{
        try {
            if (!queryFile.exists()) {
                throw new FileNotFoundException();
            }
        }catch (FileNotFoundException e) {
            throw new ParseArgumentException("Query File Usage:  java GeneBankSearch <0/1(no/with Cache)> <btree file> <query file> [<cache size>] [<debug level>]");
        }
    }
}
